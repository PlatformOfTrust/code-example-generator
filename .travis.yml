language: clojure

install:
  # Install dependencies.
  - lein run

script:
  # Run unit tests and generate code coverage report.
  - lein cloverage

  # Build binary.
  - lein uberjar

  # Test that binary works.
  - java -jar target/raml2http.jar

  # TODO Run integration/acceptance tests

after_success:
  - echo Seems to work!


after_script:
  # Run various code quality tools. Just for information.
  - lein eastwood
  - lein kibit
  - lein bikeshed

  # Check for outdated project dependencies.
  - lein deps

  # Display all annotations
  - lein annotations

before_deploy:
  # add version suffix if TAG or create temporary local tag for deployment
  # so that release from master would not be named untagged-...
  - if [ -n "$TRAVIS_TAG" ]; then
      mv target/raml2http.jar target/raml2http-${TRAVIS_TAG}.jar;
    elif [ "$TRAVIS_BRANCH" = "feature/publish_jar" -a "$TRAVIS_PULL_REQUEST" =  "false" ]; then
      export TRAVIS_TAG=latest;
    fi
  - ls target
  - echo ${TRAVIS_TAG}

# Deploy jar file to Github releases
deploy:
  # NB! this first provider is required.
  # Releases will always get deployed with the second provider but
  # it will not actually get triggered for branches unless there
  # is a configuration for 'all_branches: true'.
  - provider: releases
    api_key: $GITHUB_TOKEN
    file:  target/raml2http.jar
    skip_cleanup: true
    on:
      all_branches: true
  # This get's executed for all tags and `master` branch due
  # to local tag created in `before_deploy` stage.
  - provider: releases
    api_key: $GITHUB_TOKEN
    name: ${TRAVIS_TAG} ($(date +'%Y-%m-%d'))
    target_commitish: $TRAVIS_COMMIT
    body: "https://github.com/PlatformOfTrust/code-examples-generator/blob/master/CHANGELOG.md"
    file:
      - target/raml2http.jar
      - target/raml2http-${TRAVIS_TAG}.jar
    overwrite: true
    skip_cleanup: true
    on:
      tags: true
